generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Color {
  Red
  Blush
  Rose
  Pink
  Coral
  Merigold
  Fire
  Orange
  Squash
  Olive
  Green
  Pine
  Teal
  Blue
  Regal
  Navy
  Lilac
  Purple
  Plum
  Tan
  Brown
  Silver
  Grey
  Slate
}

enum Permission {
  Admin
  User
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  owners    User[]
  games     CollectionGame[]
}

model CollectionGame {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  collection      Collection    @relation(fields: [collectionId], references: [id])
  collectionId    String
  game            Game          @relation(fields: [gameId], references: [id])
  gameId          String
}

model Game {
  id                  String       @id @default(cuid())
  bggId               String       @unique
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  name                String
  urlImage            String?
  urlThumb            String?
  year                String?
  plays               Play[]
  pollOptions         PollOption[]
  playPreferences     UserPlayPreference[]
  collectionGames     CollectionGame[]
}

model Group {
  id                  String        @id @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String
  members             GroupMember[]
  polls               Poll[]
  plays               Play[]
  createdByUser       User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId     String
}

model GroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  isAdmin   Boolean
  // A group can't have the same user member
  @@unique([userId, groupId])
}

model Play {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime @default(now())
  startTime DateTime
  endTime   DateTime
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  firstPlay Boolean
  dontCount Boolean
  scores    Score[]
}

model Poll {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  open        Boolean      @default(true)
  title       String
  pollOptions PollOption[]
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  group       Group        @relation(fields: [groupId], references: [id])
  groupId     String
  playDate    DateTime?
}

model PollOption {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userVotes UserVote[] // Only one can be a veto
  game      Game       @relation(fields: [gameId], references: [id])
  gameId    String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String

  // A game option can only be listed once per poll
  @@unique([gameId, pollId])
}

model Score {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  player    User     @relation(fields: [playerId], references: [id])
  playerId  String
  score     Float
  play      Play?    @relation(fields: [playId], references: [id])
  playId    String?
}

model User {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  email            String        @unique
  username         String       
  password         String
  isPremiumUser    Boolean       @default(false)
  polls            Poll[]
  color            Color
  gameCollections  Collection[]
  groupMemberships GroupMember[]
  resetToken       String?
  resetTokenExpiry Float?
  scores           Score[]
  userVotes        UserVote[]
  playPreferences  UserPlayPreference[]
  createdGroups    Group[]
}

model UserPlayPreference {
  id               String        @id @default(cuid())
  game             Game          @relation(fields: [gameId], references: [id])
  gameId           String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  preference       PlayPreference

  // A user can only have one preference per game
  @@unique([userId, gameId])
}

enum PlayPreference {
  Never
  Rarely
  Sometimes
  Usually
  Always
}

model UserVote {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  veto      Boolean    @default(false)
  vote      PollOption @relation(fields: [voteId], references: [id])
  voteId    String
  voter     User       @relation(fields: [voterId], references: [id])
  voterId   String

  // A user can only vote once per poll
  @@unique([voteId, voterId])
}
